Name
====


JooseX.CPS - Implementation of [Continuation Passing Style](http://en.wikipedia.org/wiki/Continuation-passing_style) for JavaScript and some syntax sugar, simplifying its usage with Joose


SYNOPSIS
========

Procedural approach:

        UI.maskScreen("Please wait")
        
        TRY(function (url, data) {
                    
            XHR.request({
                url      : url,
                data     : data,
            
                callback : this.CONT.getCONTINUE(),
                errback  : this.CONT.getTHROW()
            })
            
        }).THEN(function (response) {
            
            if (response.isOk) {           
                alert('Saved correctly')
                
                this.CONT.CONTINUE()
            } else
                this.CONT.THROW('still got the error') //or just: throw 'still got the error'
            
        }).CATCH(function (e) {
        
            alert('Error during saving: ' + e)
            
            this.CONT.CONTINUE()
            
        }).FINALLY(function () {
        
            UI.removeScreenMask()
            
        }).NOW('http://remote.site.com/webservice', 'some data')
        
        
The same in OOP:        
        
        Class("DataStore", {
        
            trait : JooseX.CPS,
        
            has: {
                data    : { is: "rw" }
            },
            
            continued : {
            
                methods : {
                
                    save : function (url) {
                    
                        XHR.request({
                            url      : url,
                            data     : this.getData(),
                        
                            callback : this.getCONTINUE(),
                            errback  : this.getTHROW()
                        })
                    }
                }
            }
        })
        
        var store = new DataStore({
            data : [ 1, 2, 3 ]
        })
        
        UI.maskScreen("Please wait")
        
        store.save('http://remote.site.com/webservice').THEN(function (response) {
            
            if (response.isOk) {           
                alert('Saved correctly')
                
                this.CONTINUE()
            } else
                this.THROW('still got the error') //or just: throw 'still got the error'
            
        }).CATCH(function (e) {
        
            alert('Error during saving: ' + e)
            
            this.CONTINUE()
            
        }).FINALLY(function () {
        
            UI.removeScreenMask()
        }).NOW()


DESCRIPTION
===========

`JooseX.CPS` is a trait for metaclasses, which enables "Continuation passing style" in Joose methods and method modifiers.

`JooseX.CPS` allows you to define special "continued" methods and method modifiers, which forms the *asynchronous interface* of your class, 
and behave just like ordinary methods - can be inherited, composed from Role, etc.


STANDALONE USAGE
================

This module exports `TRY` function to the global namespace.

### TRY

> `JooseX.CPS.Statement TRY(Function func, Object scope, Array args)`

> Create and setup an anonymous [JooseX.CPS.Statement]() instance. For the complete list of the available methods please refer to the link,
in the meantime, take a look on the example below to see the main idea:

        TRY(function () {
        
            var CONT = this.CONT
            
            XHR.request({
                url      : url,
                data     : this.data,
            
                callback : this.CONT.getCONTINUE(),
                errback  : function (err1, err2) {
                    CONT.THROW(err1, err2) 
                }
            })
            
        }).CATCH(function (e1, e2) {
        
            ...
            
            this.CONT.CONTINUE()
        
        }).FINALLY(function () {
            
            ...
            
            this.CONT.CONTINUE()
                
        }).THEN(function(res1, res2) {
            ...
        }).THEN(
            ...
        ) 

As you can see, the control flow of the functions, wrapped with `TRY/CATCH/FINALLY` isn't managed by the standard `return` statement or explicit function end. 
Instead, to transfer the flow, you need to explicitly call the method on the embedded continuation instance, which is available as `this.CONT` (`this` scope can be passed as 2nd argument to TRY).

The call to such "control flow" method don't have to be synchronous - you can delay it arbitrary. This naturally allows to use them as callbacks (or errbacks).

However, the embedded continuation instance is only valid on the "synchronous interval" of the function execution. If you are delaying the call to the control flow method, 
either capture the continuation to the closure, or use one of `getCONTINUE/getTHROW/getRETURN` methods (see the example above).

The arguments to the control flow method will become arguments to the next corresponding section of the flow:

        // CONTINUE transfers to next THEN section

        TRY(function (p1) {
        
            this.CONT.CONTINUE('value1', 'value2')

        }).THEN(function(arg1, arg2) {
            
            //arg1 == 'value1', arg2 == 'value2' 
            
            this.CONT.CONTINUE('value3', 'value4')
            
        }).THEN(function(arg1, arg2) {
            
            //arg1 == 'value3', arg2 == 'value4' 
            
        }).NOW('p1') 
 

        // THROW transfers to the corresponding CATCH section

        TRY(function (p1) {
        
            this.CONT.THROW('error1', 'error2')

        }).CATCH(function(arg1, arg2) {
            
            //arg1 == 'error1', arg2 == 'error2' 
            
            this.CONT.CONTINUE('value3', 'value4')
            
        }).FINALLY(function() {
            
        }).THEN(function(arg1, arg2) {
            
            //arg1 == 'value3', arg2 == 'value4' 
            
        }).NOW('p1') 

*NOTE:* The `CATCH/FINALLY` statements are also "continued" - to transfer the flow from you need to call


USAGE IN JOOSE CLASSES
======================


`continued` BUILDER
-------------------

Adding `JooseX.CPS` trait will provide your class with the `continued` builder. This builder groups the declaration of the "asynchrounous part" of your class.
Inside it, you can use the following builders: `methods`, `override`, `after`, `before`. This builders have the same meaning as standard ones, however instead of usual, 
they defines the "continued" methods.


"Continued" methods
-------------------

These methods are called "continued" because inside of them, in the current scope, is embedded the continuation instance, available as `this.CONT` 

"Continued" methods do not transfer the control flow with the standard `return` statement or explicit function end. Instead, to transfer the control 
flow, you need to call the `CONTINUE` (or `RETURN`, or `THROW`) method of the continuation:


        Class("DataStore", {
            trait : JooseX.CPS,
        
            continued : {
            
                methods : {
                
                    save : function (url) {
                        if (!url.test(/^http/) { this.CONT.THROW("Invalid URL"); return }
                        
                        ...
                        
                        this.CONT.CONTINUE(result)
                    }
                }
            }
        })
        

Continued methods have the following features:

- You cannot return the value from it, in the usual meaning (with `return`). Any returned value will cause an error.

- Inside of each method, in the current scope, is available the special *continuation instance*: `this.CONT`
 
 Its an instance of [JooseX.CPS.Statement][JooseX.CPS.Statement]. All the "control flow" methods are actually executed as methods of this instance. 
 See the [JooseX.CPS.ControlFlow][JooseX.CPS.ControlFlow] for details.
    
- The parameters for any control flow method will became the arguments for the following scope. 


"Continued" method modifiers
----------------------------




EXAMPLES
========


GETTING HELP
============

This extension is supported via github issues tracker: <http://github.com/SamuraiJack/JooseX-CPS/issues>

For general Joose questions you can also visit #joose on irc.freenode.org. 


SEE ALSO
========

Web page of this extension: <http://github.com/SamuraiJack/JooseX-CPS/>

General information about Joose: <http://joose.it>


BUGS
====

All complex software has bugs lurking in it, and this module is no exception.

Please report any bugs through the web interface at <http://github.com/SamuraiJack/JooseX-CPS/issues>



AUTHORS
=======

Nickolay Platonov <nplatonov@cpan.org>



COPYRIGHT AND LICENSE
=====================

Copyright (c) 2009, Nickolay Platonov

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
* Neither the name of Nickolay Platonov nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 

[JooseX.CPS.Statement]: CPS/Statement.html
[JooseX.CPS.ControlFlow]: CPS/ControlFlow.html
