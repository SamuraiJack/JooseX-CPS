IDEAS
=====

- CONTINUE/RETURN should throw a special exceptions, so the usual 'return' won't be needed

- VAR, GET, SET - analog of scoped variables


TASKS
=====

- NOW on empty continuation should be the equivalent of CONTINUE

- add a parameter for maximum number of parallel branches running at the same time

- the 1st THROW from one of the AND branches should propagate to outer flow, results of remainig branches should be ignored


DONE
====

- then_now - `then` combined with `now`
- implement 'AND' method for parallel running tasks, and single exit point (?)
    - how to handle CATCH/THROW for them then?
- global CONT instead of scoped? (no attach then, only detach)
- clear CONT after returning from the continued method
- keep the intuitively expected scope during continued method calls (fixed?)
- create Task/ package to speedup the loading



GARBAGE
=======

- somehow eliminate the need in THROW (usual `throw` should be enough)?
- do not remove CONT/RESULT after exiting the scope to slightly improve the performance?
- test the 'detachScope' method
- RETURN from inside of CATCH scope (was a bug in Symbie, not related directly)
- allow JooseX.CPS.Statement instances as parameters to TRY, THEN, CATCH and FINALLLY
